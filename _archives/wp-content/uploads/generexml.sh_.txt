#!/bin/sh
#
#       AUTEUR : Virtual Thom
#       VERSION : 1.0
#       DATE : 20/05/2011
#
# set -n   # Decommenter pour debug syntax sans execution
#       NOTE: Ne pas oublier de recommenter !
# set -x   # Decommenter pour debug
#
##########################################################
#       SCRIPT
##########################################################
usage(){
	# exemple d'usage
	script=${0##*/} ;
	#script=${script%.*} ;
	echo "" ;
	echo "${script} - permet de recuperer des logs d'execution et de les mettre en forme" ;
	echo ""
	echo "Usage :" ;
	echo "    ${script} machine environnement tempsenseconde" ;
	echo "1er parametre  : nom de la machine" ;
	echo "2eme parametre : filtre pour la recuperation des logs, peut etre l'environnement par exemple" ;
	echo "3eme parametre : temps en secondes depuis l'execution du script jusqu'au temps de recuperation"  ;
	echo "" ;
	exit 123 ;
}
if test "$1" = "--help" -o "$1" = "-help" -o "$1" = "-h" -o -z "$1"
then
	usage	
fi
machine=${1} #Par defaut machine
environnement=${2:-PROD} #Par defaut PROD
retour_tps=${3:-86400}	#Par defaut 86400 s soit 24h

LOGS_REP=${TOM_LOG_DIR:-/opt/vtom/logs/}
LOGS_SCRIPTS=/opt/vtom/scripts/
INFILE=/opt/vtom/scripts/infile
OUTFILE=/opt/vtom/scripts/outfile
XML=/opt/vtom/scripts/${machine}_${environnement}.xml
thisday=`date +%s`	#date du jour en timestamp
dayminusday=`expr $thisday - ${retour_tps}`	#calcul date du jour - 24h (en s) en timestamp

> $OUTFILE
ls ${LOGS_REP} | grep "${environnement}.*\.o" | sort > $INFILE	#liste des logs
#chargement de l entete xml xsl
entete="<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n
<?xml-stylesheet href=\"#stylesheet\" type=\"text/xsl\"?>\n
\n
<!DOCTYPE xsl:stylesheet [\n
<!ATTLIST xsl:stylesheet\n
id	ID	#REQUIRED>\n
]>\n
\n
<!-- balises de transformation xsl -->\n
<xsl:stylesheet version=\"2.0\" id=\"stylesheet\"  xmlns:data=\"localhost\" \n
xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n
<xsl:output method=\"html\" indent=\"yes\"/>\n
\n
<!-- définition du template principal avec le rendu html -->\n
<xsl:template match=\"/\">\n
<html>\n
<head>\n
<title>Rapport log d execution job VTOM</title>\n
<style type=\"text/css\">\n
h1 a {\n
	background-color : #339933 ;\n
	border : 1pt solid black ;\n
	margin : 0 0 0 10pt ; \n
	padding : 2pt ;\n
}\n
h2 a {\n
	background-color : #33FF66 ;\n
	border : 1pt solid black ;\n
	margin : 0 0 0 20pt ;\n
	padding : 2pt ;\n
}\n
div.in{	\n
	border: inset 5pt green;\n
}\n
div.pair{\n
	border: outset 5pt green; \n
    border-collapse: separate;\n
    border-spacing: 5pt ;\n
	margin : 0 0 10pt 0 ;\n
	background-color: #33FF66 ;\n
}\n
div.impair{\n
	border: outset 5pt green; \n
    border-collapse: separate;\n
    border-spacing: 5pt ;\n
	margin : 0 0 10pt 0 ;\n
	background-color: #339933 ;\n
}\n
div.erreur1{\n
	border: outset 5pt red; \n
    border-collapse: separate;\n
    border-spacing: 5pt ;\n
	margin : 0 0 10pt 0 ;\n
	background-color: brown ;\n
}\n
div.erreur2{\n
	border: outset 5pt red; \n
    border-collapse: separate;\n
    border-spacing: 5pt ;\n
	margin : 0 0 10pt 0 ;\n
	background-color: coral ;\n
}\n
div.encours1{\n
	border: outset 5pt aqua; \n
    border-collapse: separate;\n
    border-spacing: 5pt ;\n
	margin : 0 0 10pt 0 ;\n
	background-color: blue ;\n
}\n
div.encours2{\n
	border: outset 5pt aqua; \n
    border-collapse: separate;\n
    border-spacing: 5pt ;\n
	margin : 0 0 10pt 0 ;\n
	background-color: aqua ;\n
}\n
div.logok{\n
	border : 1pt solid black ;\n
	margin : 5pt ; \n
	padding : 10pt ;\n
}\n
div.logok a{\n
	font : 12pt ;\n
	color : lawngreen ;\n
	text-decoration : underline ;\n
	background-color : darkgreen ;\n
	padding : 5 pt ;\n
}\n
div.logko {\n
	border : 1pt solid black ;\n
	margin : 5pt ; \n
	padding : 10pt ;\n
}\n
div.logko a{\n
	text-decoration : underline ;\n
	color : red ;\n
	background-color : yellow ;\n
	padding : 5 pt ;\n
}\n
</style>\n
</head>\n
<body>\n
<!-- appel des templates qui vont chercher dans les datas (les logs) --> \n
<xsl:apply-templates select=\"/xsl:stylesheet/data:data\" />\n
</body>\n
</html>\n
</xsl:template>\n
\n
\n
<xsl:template match=\"/xsl:stylesheet/data:data\">\n
<!--\n
    Ce premier appel de template va définir le layout de l'état de l'enregistrement\n
    1 row = un log d'exécution\n
-->\n
\n
<xsl:if test=\"count(row) = 0\"> \n
<a>Aucun traitement</a> \n
</xsl:if>\n
\n
<!-- JOBS EN COURS\n
     j'ai défini dans mon script\n
     que les jobs en cours ont un exit 321321\n
-->\n
<xsl:for-each select=\"row[exit = 321321]\">\n
<!-- le modulo est juste là pour faire une couleur un peu différente \n
     si plusieurs enregistrements de même type sont à la suite -->\n
<xsl:choose>\n
<xsl:when test=\"position() mod 2 = 0\" >\n
<div class=\"encours1\">\n
<div class=\"in\">\n
<!-- appel du template pour le contenu du log -->\n
<xsl:call-template name=\"rapport\" />\n
</div>\n
</div>\n
</xsl:when>\n
<xsl:otherwise>\n
<div class=\"encours2\">\n
<div class=\"in\">\n
<!-- appel du template pour le contenu du log -->\n
<xsl:call-template name=\"rapport\" />\n
</div>\n
</div>\n
</xsl:otherwise>\n
</xsl:choose>\n
</xsl:for-each> <!-- fin des row EN COURS -->\n
\n
\n
<!-- JOB EN ERREUR -->\n
<xsl:for-each select=\"row[exit != 0 and exit != 321321]\">\n
\n
<xsl:choose>\n
<xsl:when test=\"position() mod 2 = 0\" >\n
<div class=\"erreur1\">\n
<div class=\"in\">\n
<xsl:call-template name=\"rapport\" />\n
</div>\n
</div>\n
</xsl:when>\n
<xsl:otherwise>\n
<div class=\"erreur2\">\n
<div class=\"in\">\n
<xsl:call-template name=\"rapport\" />\n
</div>\n
</div>\n
</xsl:otherwise>\n
</xsl:choose>\n
</xsl:for-each> <!-- fin des row EN ERREUR -->\n
\n
<!-- JOB TERMINES -->\n
<xsl:for-each select=\"row[exit = 0]\">\n
\n
<xsl:choose>\n
<xsl:when test=\"position() mod 2 = 0\" >\n
<div class=\"pair\">\n
<div class=\"in\">\n
<xsl:call-template name=\"rapport\" />\n
</div>\n
</div>\n
</xsl:when>\n
<xsl:otherwise>\n
<div class=\"impair\">\n
<div class=\"in\">\n
<xsl:call-template name=\"rapport\" />\n
</div>\n
</div>\n
</xsl:otherwise>\n
</xsl:choose>\n
</xsl:for-each> <!-- fin des row TERMINES -->\n
\n
</xsl:template> <!-- fin du template des datas -->\n
\n
<!-- appel du template pour le contenu du log -->\n
<xsl:template name=\"rapport\">\n
<h1><a>Application : <xsl:value-of select=\"app\" /></a></h1>\n
<h2><a>Traitement : <xsl:value-of select=\"job\" /></a></h2>\n
<div class=\"logok\">\n
<a>Log d'execution : sortie standard : </a><br />\n
<pre>\n
<xsl:value-of select=\"logok\" />\n
</pre>\n
</div>\n
<div class=\"logko\">\n
<a>Log d'execution : sortie en erreur : </a><br />\n
<pre>\n
<xsl:value-of select=\"logko\" />\n
</pre>\n
</div>\n
</xsl:template> <!-- fin du template rapport -->\n
"
echo -e $entete > $XML

echo "<data:data>" >> $XML	#arbre xslt : /stylesheet/data:data/row

for LIGNE in $(cat $INFILE)
do	
	nom_exec=${LIGNE%.*}
	nom_traitement=${LIGNE%.*}	#recuperation nom du fichier sans extension chaine la plus courte a droite du . suivi de n caracteres
	nom_traitement=`echo $nom_traitement | sed 's/_[0-9][0-9][0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9]$//'` #suppression de la date et heure exemple de sed
	date_exec=`echo $LIGNE | awk -F "_" '{print $NF}' | awk -F "." '{print $1}' | awk -F "-" '{print $1}'`	#je laisse un exemple avec awk -F est le delemiter $NF le dernier argument
	heure_exec=${nom_exec##*-}	#chaine la plus longue a gauche de - suivi de n caracteres
	heure_exec=`echo $heure_exec | sed 's/^[0-9][0-9]/&:/' | sed 's/[0-9][0-9]$/:&/'`	#trick pour rajouter : entre heures et minutes avec sed
	date_traitement=`date --date="$date_exec $heure_exec" +"%d/%m/%y %H:%M:%S"` #interpretation de la date par --date et remise en format classique
	date_exec=`date --date="$date_exec $heure_exec" +%s`	#timestamp pour tester avec le timestamp minimum requis
	
	if test "$date_exec" \> "$dayminusday" -a $LIGNE != ""
	then
		echo "	<row>" >> $XML
		echo "		<app>" >> $XML
		app=`head -n 20 "$LOGS_REP$LIGNE" | grep "Application" | awk -F ":" '{print $2}'`	#head comme tail mais en partant du debut recuperation du nom application dans les logs
		echo "		$app" >> $XML
		echo "		</app>" >> $XML
					
		echo "		<job>" >> $XML
		job=`head -n 20 "$LOGS_REP$LIGNE" | grep "Traitement" | awk -F ":" '{print $2}'`	#recuperation du nom traitement dans les logs
		echo "		$job" >> $XML
		echo "		</job>" >> $XML
						
		echo "		<exit>" >> $XML
		num_exit=`tail -n 5 "$LOGS_REP$LIGNE" | grep "Exit" | awk -F "[" '{print $2}' | awk -F "]" '{print $1}'`	#recuperation du numero exit dans les logs
		if test "${num_exit}" != ""
		then
			echo "		$num_exit" >> $XML
		else
			echo "		321321" >> $XML
		fi
		echo "		</exit>" >> $XML
		
		echo "		<logok>" >> $XML
		#cat ${LOGS_REP}$LIGNE    |  sed  's#<#\&lt;#g' | sed 's#>#\&gt;#g' | sed 's#&#\&amp;#g' >> $XML	#sed remplace les < et les > par les notations xml pour ces caracteres speciaux
		cat ${LOGS_REP}$LIGNE  | sed 's#&#\&amp;#g'  |  sed  's#<#\&lt;#g' | sed 's#>#\&gt;#g'  >> $XML
		echo "		</logok>" >> $XML
		logko=`echo $LIGNE | sed 's/\.o$/\.e/'`	#exemple de sed j aurai pu mettre ${nom_exec}.e
		echo "		<logko>" >> $XML
		cat ${LOGS_REP}$logko  | sed 's#&#\&amp;#g'  |  sed  's#<#\&lt;#g' | sed 's#>#\&gt;#g'  >> $XML
		echo "		</logko>" >> $XML
		echo "	</row>" >> $XML
		
	fi
done

echo "</data:data>" >> $XML
echo "</xsl:stylesheet>" >> $XML	#arbre xslt : /stylesheet/data:data/row

rm -f $INFILE	#nettoyage fichiers temp
rm -f $OUTFILE
